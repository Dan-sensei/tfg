generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model tfg {
  id           Int              @id(map: "TFG_pkey") @default(autoincrement())
  thumbnail    String
  banner       String
  title        String
  contentBlocks String
  pages        Int
  documentLink String
  tags         String[]
  views        Int              @default(0)
  score        Float            @default(0)
  createdAt    DateTime         @default(now())
  description  String           
  scoredTimes  Int              @default(0)
  trendingScore Float @default(0)

  status       Int           @default(0)
  reviewMessages ReviewMessage[]

  // Relationships IDs
  categoryId   Int
  collegeId    Int
  departmentId Int?
  titulationId      Int

  // Relationships
  DailyTFGView daily_tfg_view[]
  defense      defense?
  category     category         @relation(fields: [categoryId], references: [id], map: "TFG_categoryId_fkey")
  college      college          @relation(fields: [collegeId], references: [id], map: "TFG_collegeId_fkey")
  department   department?      @relation(fields: [departmentId], references: [id], map: "TFG_departmentId_fkey", onDelete: SetNull)
  titulation   titulation       @relation(fields: [titulationId], references: [id], map: "TFG_titulationId_fkey")
  voteLogs     votelog[]
  authors user[]
  tutors  TutorTFG[]

  @@index([status], name: "TFG_status_index")
}
model ReviewMessage {
  id        Int      @id @default(autoincrement())
  message   String
  edited    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int?
  tfgId     Int
  user      user?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  tfg       tfg      @relation(fields: [tfgId], references: [id], onDelete: Cascade)
  reads     MessageRead[]
}
model MessageRead {
  id          Int      @id @default(autoincrement())
  userId      Int?
  messageId   Int
  readAt      DateTime @default(now())

  user       user?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  message     ReviewMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}
model department {
  id   Int     @id @default(autoincrement())
  name String
  link String?
  tfgs tfg[]
  collegeId Int
  college college @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  @@unique([name, collegeId])
}

model user {
  id Int @id @default(autoincrement())
  name      String
  image     String?
  email String @unique
  role Int
  socials String?
  personalPage String?
  collegeId Int
  college college  @relation(fields: [collegeId], references: [id])
  supervisedProjecs TutorTFG[]
  personalProjectId     Int?
  personalProject       tfg?   @relation(fields: [personalProjectId], references: [id], onDelete: SetNull)
  reviewMessages ReviewMessage[]
  messageReads       MessageRead[]
}

model titulation {
  id        Int     @id(map: "GradeMaster_pkey") @default(autoincrement())
  name      String
  collegeId Int
  tfgs      tfg[]
  college   college @relation(fields: [collegeId], references: [id], map: "GradeMaster_collegeId_fkey", onDelete: Cascade)
  @@unique([name, collegeId])
}

model college {
  id               Int          @id(map: "College_pkey") @default(autoincrement())
  name             String
  createdAt        DateTime     @default(now())
  image            String?
  defenses         defense[]
  defenseLocations location[]
  tfgs             tfg[]
  titulation      titulation[]
  user user[]
  departments department[]
}

model TutorTFG {
  userId Int
  tfgId  Int
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade)
  tfg    tfg  @relation(fields: [tfgId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy Int
  @@id([userId, tfgId])
}

model category {
  id   Int    @id(map: "Category_pkey") @default(autoincrement())
  name String @unique
  icon String?
  tfgs tfg[]
}

model votelog {
  id        Int      @id(map: "VoteLog_pkey") @default(autoincrement())
  tfgId     Int
  ip        String
  createdAt DateTime @default(now())
  tfg       tfg      @relation(fields: [tfgId], references: [id], map: "VoteLog_tfgId_fkey")
}

model defense {
  id         Int      @id(map: "Defense_pkey") @default(autoincrement())
  title      String
  locationId Int
  tfgId      Int?     @unique(map: "Defense_tfgId_key")
  collegeId  Int
  startTime  DateTime
  endTime    DateTime
  college    college  @relation(fields: [collegeId], references: [id], map: "Defense_collegeId_fkey", onDelete: Cascade)
  location   location @relation(fields: [locationId], references: [id], map: "Defense_locationId_fkey")
  tfg        tfg?     @relation(fields: [tfgId], references: [id], map: "Defense_tfgId_fkey", onDelete: SetNull)
}

model location {
  id        Int       @id(map: "Location_pkey") @default(autoincrement())
  name      String
  mapLink   String?
  collegeId Int
  defenses  defense[]
  college   college   @relation(fields: [collegeId], references: [id], map: "Location_collegeId_fkey", onDelete: Cascade)
  @@unique([name, collegeId])
}

model daily_tfg_view {
  id    Int      @id(map: "DailyTFGView_pkey") @default(autoincrement())
  tfgId Int
  views Int      @default(0)
  date  DateTime @default(now())
  tfg   tfg      @relation(fields: [tfgId], references: [id], map: "DailyTFGView_tfgId_fkey", onDelete: Cascade)

  @@unique([tfgId, date], map: "DailyTFGView_tfgId_date_key")
}
